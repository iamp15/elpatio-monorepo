"use strict";

const BOT_CONFIG = require("../../config/bot-config");
const userStateManager = require("../../user-state");
const { registerOrFindPlayer } = require("../../utils/helpers");

// Variables de entorno
const TEST_MODE = process.env.TEST_MODE === "true" || !process.env.BACKEND_URL;

/**
 * Maneja la validaci√≥n del nombre de sala y muestra confirmaci√≥n de precio
 */
async function handleCreateSalaFinal(bot, api, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const nombreSala = msg.text.trim();

  try {
    // Validar nombre de sala
    if (!nombreSala || nombreSala.length < 3) {
      await bot.sendMessage(
        chatId,
        "‚ùå <b>Nombre de sala inv√°lido</b>\n\nEl nombre debe tener al menos 3 caracteres.\n\nüìù Intenta de nuevo:",
        { parse_mode: "HTML" }
      );
      return;
    }

    if (nombreSala.length > 100) {
      await bot.sendMessage(
        chatId,
        "‚ùå <b>Nombre de sala muy largo</b>\n\nEl nombre debe tener m√°ximo 100 caracteres.\n\nüìù Intenta de nuevo:",
        { parse_mode: "HTML" }
      );
      return;
    }

    // Obtener datos de la sala en creaci√≥n
    const userState = userStateManager.getState(userId);
    const salaEnCreacion = userState.creatingSala;

    if (!salaEnCreacion) {
      await bot.sendMessage(
        chatId,
        "‚ùå <b>Error en el proceso</b>\n\nNo se encontraron datos de la sala en creaci√≥n. Intenta crear la sala nuevamente.",
        { parse_mode: "HTML" }
      );
      return;
    }

    const { modo, juego } = salaEnCreacion;
    const juegoConfig = BOT_CONFIG.juegos.find((j) => j.id === juego);

    if (!juegoConfig) {
      await bot.sendMessage(
        chatId,
        "‚ùå <b>Juego no encontrado</b>\n\nEl juego seleccionado ya no est√° disponible.",
        { parse_mode: "HTML" }
      );
      return;
    }

    // Importar PaymentConfigManager para obtener precios del backend
    const PaymentConfigManager = require("../../utils/payment-config-manager");
    const moneyUtils = require("../../utils/money-utils");

    // Crear instancia del PaymentConfigManager
    const paymentConfigManager = new PaymentConfigManager(api);

    // Obtener precio de entrada desde el backend
    let precioEntrada = 0;
    let premioCalculado = 0;

    try {
      // Obtener precio de entrada seg√∫n el modo de la sala
      precioEntrada = await paymentConfigManager.getGamePrice(juego, modo);

      // Obtener el l√≠mite de jugadores para calcular el premio
      const limiteJugadores = juegoConfig.modos[modo]?.limiteJugadores || 4;

      // Calcular premio usando la funci√≥n calculatePrize
      const prizeInfo = await paymentConfigManager.calculatePrize(
        precioEntrada,
        limiteJugadores
      );
      if (prizeInfo) {
        premioCalculado = prizeInfo.winnerPrize;
      }
    } catch (error) {
      console.log(
        `Error obteniendo precios para sala ${juego}/${modo}:`,
        error.message
      );
      // Usar valores por defecto si hay error
      precioEntrada = 5000; // 50 Bs por defecto
      premioCalculado = 20000; // 200 Bs por defecto
    }

    // Formatear precios para mostrar en el mensaje
    const entradaFormateada = moneyUtils.formatCurrency(precioEntrada, "VES");
    const premioFormateado = moneyUtils.formatCurrency(premioCalculado, "VES");

    // Actualizar el estado con el nombre de la sala y precios
    userStateManager.setState(userId, {
      ...userState,
      creatingSala: {
        ...salaEnCreacion,
        nombre: nombreSala,
        precioEntrada: precioEntrada,
        premioCalculado: premioCalculado,
        waitingForConfirmation: true,
      },
    });

    // Mostrar mensaje de confirmaci√≥n con precio
    await mostrarConfirmacionPrecio(bot, chatId, {
      nombreSala,
      juegoConfig,
      modo,
      entradaFormateada,
      premioFormateado,
      precioEntrada,
    });
  } catch (err) {
    console.error("‚ùå Error validando nombre de sala:", err.message);

    // Limpiar estado en caso de error
    userStateManager.setState(userId, {
      ...userStateManager.getState(userId),
      creatingSala: null,
    });

    await bot.sendMessage(
      chatId,
      "‚ùå <b>Error procesando nombre de sala</b>\n\nHubo un problema al validar el nombre. Intenta de nuevo o contacta al admin.",
      { parse_mode: "HTML" }
    );
  }
}

/**
 * Muestra el mensaje de confirmaci√≥n con el precio de entrada
 */
async function mostrarConfirmacionPrecio(
  bot,
  chatId,
  {
    nombreSala,
    juegoConfig,
    modo,
    entradaFormateada,
    premioFormateado,
    precioEntrada,
  }
) {
  const mensajeConfirmacion = `üí∞ <b>Confirmaci√≥n de Precio de Entrada</b>

üèóÔ∏è <b>Sala:</b> ${nombreSala}
üéÆ <b>Juego:</b> ${juegoConfig.nombre}
‚öîÔ∏è <b>Modo:</b> ${juegoConfig.modos[modo]?.nombre || modo}
üèÜ <b>Premio:</b> ${premioFormateado}

üí≥ <b>Precio de entrada:</b> ${entradaFormateada}

‚ö†Ô∏è <b>IMPORTANTE:</b>
‚Ä¢ Se te cobrar√° ${entradaFormateada} al crear la sala
‚Ä¢ El cobro se aplicar√° inmediatamente
‚Ä¢ Aseg√∫rate de tener saldo suficiente
‚Ä¢ No podr√°s cancelar despu√©s de confirmar

¬øDeseas continuar con la creaci√≥n de la sala?`;

  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚úÖ S√≠, crear sala", callback_data: "confirm_create_sala" },
          { text: "‚ùå Cancelar", callback_data: "cancel_create_sala" },
        ],
        [
          {
            text: "üí∞ Ver mi saldo",
            callback_data: "check_balance_before_create",
          },
        ],
      ],
    },
  };

  await bot.sendMessage(chatId, mensajeConfirmacion, {
    parse_mode: "HTML",
    ...inlineKeyboard,
  });
}

/**
 * Maneja la confirmaci√≥n final de creaci√≥n de sala
 */
async function handleConfirmCreateSala(bot, api, callbackQuery) {
  const { message, from } = callbackQuery;
  const chatId = message.chat.id;
  const userId = from.id;

  try {
    // Obtener datos de la sala en creaci√≥n
    const userState = userStateManager.getState(userId);
    const salaEnCreacion = userState.creatingSala;

    if (!salaEnCreacion || !salaEnCreacion.waitingForConfirmation) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå No hay sala pendiente de confirmaci√≥n",
      });
      return;
    }

    const { nombre, juego, modo, precioEntrada, premioCalculado } =
      salaEnCreacion;
    const juegoConfig = BOT_CONFIG.juegos.find((j) => j.id === juego);

    if (!juegoConfig) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå Juego no encontrado",
      });
      return;
    }

    // Configuraci√≥n para la sala con precios del backend
    const configuracion = {
      entrada: precioEntrada,
      premio: premioCalculado,
    };

    // Crear la sala en el backend
    const salaData = {
      nombre,
      juego,
      modo,
      configuracion,
    };

    let salaCreada;
    let cobroInfo = null;

    if (TEST_MODE) {
      // Simular creaci√≥n en modo TEST
      salaCreada = {
        _id: `sala_test_${Date.now()}`,
        ...salaData,
        jugadores: [{ id: userId }],
        estado: "esperando",
        creadaEn: new Date(),
      };
      // Simular informaci√≥n de cobro en modo TEST
      cobroInfo = {
        cobroAplicado: precioEntrada > 0,
        montoCobrado: precioEntrada,
        saldoAnterior: 100000, // Simular saldo
        saldoNuevo: 100000 - precioEntrada,
      };
    } else {
      // Crear en el backend real
      // Primero obtener o crear el jugador
      const jugador = await registerOrFindPlayer(api, from);

      // Agregar el ID del jugador creador a los datos de la sala
      salaData.jugadorCreador = jugador._id || jugador.id;

      const response = await api.createSala(salaData);
      salaCreada = response.sala || response;

      // Extraer informaci√≥n del cobro de la respuesta
      cobroInfo = {
        cobroAplicado: response.cobroAplicado || false,
        montoCobrado: response.montoCobrado || 0,
        saldoAnterior: response.saldoAnterior || null,
        saldoNuevo: response.saldoNuevo || null,
      };
    }

    // Limpiar estado de creaci√≥n
    userStateManager.setState(userId, {
      ...userState,
      creatingSala: null,
    });

    // Mensaje de confirmaci√≥n con bot√≥n para ver salas
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üè† Ver Salas",
              callback_data: `ver_salas_after_create:${juego}`,
            },
          ],
        ],
      },
    };

    // Formatear precios para mostrar en el mensaje
    const moneyUtils = require("../../utils/money-utils");
    const entradaFormateada = moneyUtils.formatCurrency(
      configuracion.entrada,
      "VES"
    );
    const premioFormateado = moneyUtils.formatCurrency(
      configuracion.premio,
      "VES"
    );

    // Construir mensaje base
    let mensajeConfirmacion = `‚úÖ <b>¬°Sala creada exitosamente!</b>

üèóÔ∏è <b>Sala:</b> ${salaCreada.nombre}
üéÆ <b>Juego:</b> ${juegoConfig.nombre}
‚öîÔ∏è <b>Modo:</b> ${juegoConfig.modos[modo]?.nombre || modo}
üí∞ <b>Entrada:</b> ${entradaFormateada}
üèÜ <b>Premio:</b> ${premioFormateado}`;

    // Agregar informaci√≥n del cobro si se aplic√≥
    if (cobroInfo && cobroInfo.cobroAplicado) {
      const montoCobradoFormateado = moneyUtils.formatCurrency(
        cobroInfo.montoCobrado,
        "VES"
      );
      const saldoAnteriorFormateado = moneyUtils.formatCurrency(
        cobroInfo.saldoAnterior,
        "VES"
      );
      const saldoNuevoFormateado = moneyUtils.formatCurrency(
        cobroInfo.saldoNuevo,
        "VES"
      );

      mensajeConfirmacion += `

üí≥ <b>Cobro de entrada aplicado:</b>
‚Ä¢ <b>Monto cobrado:</b> ${montoCobradoFormateado}
‚Ä¢ <b>Saldo anterior:</b> ${saldoAnteriorFormateado}
‚Ä¢ <b>Saldo actual:</b> ${saldoNuevoFormateado}`;
    }

    mensajeConfirmacion += `

üìã <b>Pr√≥ximos pasos:</b>
‚Ä¢ Ya est√°s en la sala como creador
‚Ä¢ Otros jugadores pueden unirse
‚Ä¢ ¬°Disfruta tu partida!`;

    await bot.sendMessage(chatId, mensajeConfirmacion, {
      parse_mode: "HTML",
      ...inlineKeyboard,
    });

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "‚úÖ Sala creada exitosamente",
    });
  } catch (err) {
    console.error("‚ùå Error creando sala:", err.response?.data || err.message);

    // Limpiar estado en caso de error
    userStateManager.setState(userId, {
      ...userStateManager.getState(userId),
      creatingSala: null,
    });

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "‚ùå Error creando sala",
    });

    // Manejar errores espec√≠ficos del backend
    const errorData = err.response?.data || err.message;
    if (errorData && typeof errorData === "object" && errorData.mensaje) {
      const mensaje = errorData.mensaje;

      // Errores espec√≠ficos de validaci√≥n para crear sala
      if (
        mensaje.includes("No puedes crear una sala mientras est√°s jugando") ||
        (mensaje.includes("est√°s jugando") && mensaje.includes("crear"))
      ) {
        await bot.sendMessage(
          chatId,
          `‚ùå <b>No puedes crear una sala mientras est√°s jugando</b>

üéÆ <b>Estado actual:</b> Jugando
üë§ <b>Jugador:</b> ${from.first_name || from.username || "Jugador"}

üí° <b>Soluci√≥n:</b> 
‚Ä¢ Termina tu partida actual
‚Ä¢ O espera a que termine autom√°ticamente
‚Ä¢ Luego podr√°s crear una nueva sala`,
          { parse_mode: "HTML" }
        );
      } else if (mensaje.includes("Saldo insuficiente para crear la sala")) {
        // Manejar error de saldo insuficiente
        const saldoActual = errorData.saldoActual || 0;
        const montoRequerido = errorData.montoRequerido || 0;

        const moneyUtils = require("../../utils/money-utils");
        const saldoFormateado = moneyUtils.formatCurrency(saldoActual, "VES");
        const montoFormateado = moneyUtils.formatCurrency(
          montoRequerido,
          "VES"
        );
        const diferencia = montoRequerido - saldoActual;
        const diferenciaFormateada = moneyUtils.formatCurrency(
          diferencia,
          "VES"
        );

        await bot.sendMessage(
          chatId,
          `‚ùå <b>Saldo insuficiente para crear la sala</b>

üí∞ <b>Informaci√≥n de saldo:</b>
‚Ä¢ <b>Saldo actual:</b> ${saldoFormateado}
‚Ä¢ <b>Entrada requerida:</b> ${montoFormateado}
‚Ä¢ <b>Falta:</b> ${diferenciaFormateada}

üí° <b>Soluciones:</b>
‚Ä¢ Recarga tu saldo en el bot
‚Ä¢ Usa el comando /recargar para agregar fondos
‚Ä¢ Contacta a un administrador para recarga manual

üîÑ <b>Una vez que tengas saldo suficiente:</b>
‚Ä¢ Intenta crear la sala nuevamente
‚Ä¢ El cobro se aplicar√° autom√°ticamente`,
          { parse_mode: "HTML" }
        );
      } else if (mensaje.includes("Ya tienes una sala creada de modo")) {
        await bot.sendMessage(
          chatId,
          `‚ùå <b>L√≠mite de creaci√≥n alcanzado</b>\n\n${mensaje}\n\nüí° <b>Soluci√≥n:</b> Debes cancelar la sala existente antes de crear otra del mismo modo.`
        );
      } else if (mensaje.includes("Ya tienes 2 salas creadas")) {
        await bot.sendMessage(
          chatId,
          `‚ùå <b>L√≠mite de creaci√≥n alcanzado</b>\n\n${mensaje}\n\nüí° <b>Soluci√≥n:</b> Debes cancelar una sala antes de crear otra.`
        );
      } else if (
        mensaje.includes("Ya hay 5 salas de") &&
        mensaje.includes("esperando jugadores")
      ) {
        await bot.sendMessage(
          chatId,
          `‚ùå <b>L√≠mite de salas alcanzado</b>\n\n${mensaje}\n\nüí° <b>Soluci√≥n:</b> Intenta crear una sala de otro modo o espera a que se complete una sala existente.`
        );
      } else {
        // Otros errores espec√≠ficos del backend
        await bot.sendMessage(
          chatId,
          `‚ùå <b>Error creando la sala</b>\n\n${mensaje}`
        );
      }
    } else {
      // Error gen√©rico
      await bot.sendMessage(
        chatId,
        "‚ùå <b>Error creando la sala</b>\n\nHubo un problema al crear la sala. Intenta de nuevo o contacta al admin.",
        { parse_mode: "HTML" }
      );
    }
  }
}

/**
 * Maneja la cancelaci√≥n de creaci√≥n de sala
 */
async function handleCancelCreateSala(bot, api, callbackQuery) {
  const { message, from } = callbackQuery;
  const chatId = message.chat.id;
  const userId = from.id;

  try {
    // Limpiar estado de creaci√≥n
    userStateManager.setState(userId, {
      ...userStateManager.getState(userId),
      creatingSala: null,
    });

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "‚ùå Creaci√≥n de sala cancelada",
    });

    await bot.sendMessage(
      chatId,
      `‚ùå <b>Creaci√≥n de sala cancelada</b>

üõ°Ô∏è <b>No se ha creado ninguna sala</b>
‚Ä¢ No se ha aplicado ning√∫n cobro
‚Ä¢ Puedes crear una nueva sala cuando quieras
‚Ä¢ Usa /crear para comenzar de nuevo

üéÆ <b>¬øQu√© puedes hacer ahora?</b>
‚Ä¢ /crear - Crear una nueva sala
‚Ä¢ /salas - Ver salas disponibles
‚Ä¢ /mip - Ver tu perfil`,
      { parse_mode: "HTML" }
    );
  } catch (err) {
    console.error("‚ùå Error cancelando creaci√≥n de sala:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "‚ùå Error cancelando",
    });
  }
}

/**
 * Maneja la verificaci√≥n de saldo antes de crear sala
 */
async function handleCheckBalanceBeforeCreate(bot, api, callbackQuery) {
  const { message, from } = callbackQuery;
  const chatId = message.chat.id;
  const userId = from.id;

  try {
    // Obtener datos de la sala en creaci√≥n
    const userState = userStateManager.getState(userId);
    const salaEnCreacion = userState.creatingSala;

    if (!salaEnCreacion || !salaEnCreacion.waitingForConfirmation) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå No hay sala pendiente de confirmaci√≥n",
      });
      return;
    }

    let saldo = 0;
    let displayName = from.first_name || "Jugador";

    // Obtener saldo del jugador
    if (!TEST_MODE) {
      try {
        const jugador = await api.findPlayerByTelegram(String(userId));
        if (jugador) {
          displayName =
            jugador.nickname ||
            jugador.firstName ||
            jugador.username ||
            displayName;
          saldo = await api.getPlayerBalance(String(userId));
        }
      } catch (err) {
        console.error("‚ùå Error obteniendo saldo:", err.message);
      }
    } else {
      saldo = 100000; // Simular saldo en modo TEST
    }

    // Formatear saldo
    const moneyUtils = require("../../utils/money-utils");
    const saldoFormateado = moneyUtils.formatCurrency(saldo, "VES");
    const entradaFormateada = moneyUtils.formatCurrency(
      salaEnCreacion.precioEntrada,
      "VES"
    );
    const diferencia = saldo - salaEnCreacion.precioEntrada;
    const diferenciaFormateada = moneyUtils.formatCurrency(diferencia, "VES");

    const mensajeSaldo = `üí∞ <b>Tu Saldo Actual</b>

üë§ <b>Jugador:</b> ${displayName}
üí≥ <b>Saldo actual:</b> ${saldoFormateado}
üéØ <b>Entrada requerida:</b> ${entradaFormateada}
${
  diferencia >= 0
    ? `‚úÖ <b>Saldo suficiente</b>`
    : `‚ùå <b>Saldo insuficiente</b>`
}
${
  diferencia >= 0
    ? `üîÑ <b>Saldo restante:</b> ${diferenciaFormateada}`
    : `‚ö†Ô∏è <b>Falta:</b> ${diferenciaFormateada}`
}

${
  diferencia >= 0
    ? `‚úÖ <b>Puedes crear la sala</b>\n‚Ä¢ Tu saldo es suficiente para la entrada`
    : `‚ùå <b>No puedes crear la sala</b>\n‚Ä¢ Necesitas recargar tu saldo primero`
}`;

    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üîÑ Volver a confirmaci√≥n",
              callback_data: "back_to_confirmation",
            },
          ],
          ...(diferencia < 0
            ? [
                [
                  {
                    text: "üí∞ Recargar saldo",
                    callback_data: "profile_deposit",
                  },
                ],
              ]
            : []),
        ],
      },
    };

    await bot.sendMessage(chatId, mensajeSaldo, {
      parse_mode: "HTML",
      ...inlineKeyboard,
    });

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "üí∞ Saldo verificado",
    });
  } catch (err) {
    console.error("‚ùå Error verificando saldo:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "‚ùå Error verificando saldo",
    });
  }
}

/**
 * Maneja el regreso a la confirmaci√≥n de creaci√≥n de sala
 */
async function handleBackToConfirmation(bot, api, callbackQuery) {
  const { message, from } = callbackQuery;
  const chatId = message.chat.id;
  const userId = from.id;

  try {
    // Obtener datos de la sala en creaci√≥n
    const userState = userStateManager.getState(userId);
    const salaEnCreacion = userState.creatingSala;

    if (!salaEnCreacion || !salaEnCreacion.waitingForConfirmation) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå No hay sala pendiente de confirmaci√≥n",
      });
      return;
    }

    const { nombre, juego, modo, precioEntrada, premioCalculado } =
      salaEnCreacion;
    const juegoConfig = BOT_CONFIG.juegos.find((j) => j.id === juego);

    if (!juegoConfig) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå Juego no encontrado",
      });
      return;
    }

    // Formatear precios
    const moneyUtils = require("../../utils/money-utils");
    const entradaFormateada = moneyUtils.formatCurrency(precioEntrada, "VES");
    const premioFormateado = moneyUtils.formatCurrency(premioCalculado, "VES");

    // Mostrar confirmaci√≥n nuevamente
    await mostrarConfirmacionPrecio(bot, chatId, {
      nombreSala: nombre,
      juegoConfig,
      modo,
      entradaFormateada,
      premioFormateado,
      precioEntrada,
    });

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "üîÑ Volviendo a confirmaci√≥n",
    });
  } catch (err) {
    console.error("‚ùå Error volviendo a confirmaci√≥n:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "‚ùå Error",
    });
  }
}

module.exports = {
  handleCreateSalaFinal,
  handleConfirmCreateSala,
  handleCancelCreateSala,
  handleCheckBalanceBeforeCreate,
  handleBackToConfirmation,
};
