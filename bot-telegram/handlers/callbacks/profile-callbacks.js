"use strict";

const userStateManager = require("../../user-state");
const { getWebAppUrl } = require("../../config/webapp-config");

/**
 * Maneja la creaci√≥n de nickname
 */
async function handleCreateNickname(bot, api, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    // Establecer estado para esperar el nickname
    userStateManager.setState(userId, { waitingForNickname: true });

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Escribe tu nickname",
    });

    await bot.sendMessage(
      chatId,
      `üéÆ <b>Crear Nickname</b>

üìã <b>Reglas para tu nickname:</b>
‚Ä¢ Entre 3 y 32 caracteres
‚Ä¢ Una sola palabra (sin espacios)
‚Ä¢ Solo letras (incluyendo √±), n√∫meros, guiones (-) y guiones bajos (_)
‚Ä¢ Debe contener al menos una letra
‚Ä¢ No puede empezar o terminar con gui√≥n
‚Ä¢ Palabras apropiadas √∫nicamente

üìù <b>Env√≠ame tu nickname:</b>`,
      { parse_mode: "HTML" }
    );
  } catch (err) {
    console.error("‚ùå Error en create nickname:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Error procesando solicitud",
    });
  }
}

/**
 * Maneja el cambio de nickname con verificaci√≥n de l√≠mites
 */
async function handleChangeNickname(bot, api, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    // Verificar l√≠mites de cambio de nickname
    const NicknameLimitManager = require("../../utils/nickname-limit-manager");
    const limitManager = new NicknameLimitManager();
    const limitCheck = await limitManager.canChangeNickname(String(userId));

    if (!limitCheck.canChange) {
      // Usuario no puede cambiar nickname, mostrar informaci√≥n de l√≠mites
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "L√≠mite de cambios alcanzado",
      });

      await bot.sendMessage(
        chatId,
        `‚è∞ <b>L√≠mite de Cambio de Nickname Alcanzado</b>

${limitCheck.message}

üîÑ <b>Pr√≥ximo reset:</b> ${limitCheck.nextReset.toLocaleDateString("es-ES", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        })}

üí° <b>Tip:</b> Los l√≠mites se resetean cada lunes a las 00:00

üîÑ <b>Int√©ntalo de nuevo despu√©s del reset</b>`,
        { parse_mode: "HTML" }
      );
      return;
    }

    // Usuario puede cambiar nickname, mostrar informaci√≥n de l√≠mites disponibles
    const limitInfo = await limitManager.getLimitInfo(String(userId));

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: `Puedes cambiar tu nickname (${limitCheck.remainingChanges} restante(s))`,
    });

    await bot.sendMessage(
      chatId,
      `‚úèÔ∏è <b>Cambiar Nickname</b>

üìã <b>Reglas para tu nickname:</b>
‚Ä¢ Entre 3 y 32 caracteres
‚Ä¢ Una sola palabra (sin espacios)
‚Ä¢ Solo letras (incluyendo √±), n√∫meros, guiones (-) y guiones bajos (_)
‚Ä¢ Debe contener al menos una letra
‚Ä¢ No puede empezar o terminar con gui√≥n
‚Ä¢ Palabras apropiadas √∫nicamente

‚è∞ <b>L√≠mites actuales:</b>
${limitInfo.message}
üîÑ <b>Pr√≥ximo reset:</b> ${limitInfo.nextReset.toLocaleDateString("es-ES", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      })}

üìù <b>Env√≠ame tu nuevo nickname:</b>`,
      { parse_mode: "HTML" }
    );

    // Establecer estado para esperar el nuevo nickname
    userStateManager.setState(userId, { waitingForNicknameChange: true });
  } catch (err) {
    console.error("‚ùå Error en change nickname:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Error procesando solicitud",
    });
  }
}

/**
 * Maneja la solicitud de dep√≥sito - Abre la Mini App
 */
async function handleDeposit(bot, api, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Abriendo Mini App de dep√≥sitos...",
    });

    // URL de la Mini App desde configuraci√≥n
    const webAppUrl = getWebAppUrl("DEPOSITO");

    await bot.sendMessage(
      chatId,
      `üí∞ <b>Realizar Dep√≥sito</b>

üí≥ <b>Haz clic en el bot√≥n de abajo para abrir la Mini App de dep√≥sitos</b>

üì± <b>En la Mini App podr√°s:</b>
‚Ä¢ Ingresar el monto que deseas depositar
‚Ä¢ Ver los datos bancarios del cajero
‚Ä¢ Confirmar tu pago m√≥vil
‚Ä¢ Seguir el estado de tu transacci√≥n

üîí <b>Seguro y confiable</b>
‚Ä¢ Todos los datos se procesan de forma segura
‚Ä¢ Comunicaci√≥n directa con el sistema de transacciones
‚Ä¢ Verificaci√≥n autom√°tica de pagos

¬°Haz clic en el bot√≥n para comenzar!`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üí≥ Abrir Mini App de Dep√≥sitos",
                web_app: { url: webAppUrl },
              },
            ],
            [
              {
                text: "üìä Ver Historial de Dep√≥sitos",
                callback_data: "profile_deposit_history",
              },
            ],
            [
              {
                text: "‚¨ÖÔ∏è Volver al Perfil",
                callback_data: "profile_main",
              },
            ],
          ],
        },
      }
    );
  } catch (err) {
    console.error("‚ùå Error en deposit:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Error abriendo Mini App",
    });

    await bot.sendMessage(
      chatId,
      `‚ùå <b>Error</b>

No se pudo abrir la Mini App de dep√≥sitos. Por favor intenta de nuevo o contacta al administrador.

üîß <b>Posibles causas:</b>
‚Ä¢ Problema de conexi√≥n
‚Ä¢ Mini App temporalmente no disponible
‚Ä¢ Error en la configuraci√≥n

¬°Intenta de nuevo en unos minutos!`,
      { parse_mode: "HTML" }
    );
  }
}

/**
 * Maneja la solicitud de historial de dep√≥sitos
 */
async function handleDepositHistory(bot, api, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Cargando historial de dep√≥sitos...",
    });

    // TODO: Implementar obtenci√≥n de historial de dep√≥sitos desde el backend
    // const historial = await api.obtenerHistorialDepositos(userId.toString());

    // Por ahora mostrar mensaje de desarrollo
    await bot.sendMessage(
      chatId,
      `üìä <b>Historial de Dep√≥sitos</b>

‚ö†Ô∏è <b>Funci√≥n en desarrollo</b>

Pr√≥ximamente podr√°s ver:
‚Ä¢ Historial completo de tus dep√≥sitos
‚Ä¢ Estados de cada transacci√≥n
‚Ä¢ Fechas y montos
‚Ä¢ Referencias de pago

üí° <b>Mientras tanto:</b>
‚Ä¢ Usa la Mini App para realizar nuevos dep√≥sitos
‚Ä¢ El historial se guardar√° autom√°ticamente

¬°Mantente atento a las actualizaciones!`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üí≥ Realizar Nuevo Dep√≥sito",
                callback_data: "profile_deposit",
              },
            ],
            [
              {
                text: "‚¨ÖÔ∏è Volver al Perfil",
                callback_data: "profile_main",
              },
            ],
          ],
        },
      }
    );
  } catch (err) {
    console.error("‚ùå Error en deposit history:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Error cargando historial",
    });
  }
}

/**
 * Maneja la solicitud de retiro
 */
async function handleWithdraw(bot, api, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;

  try {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Funci√≥n en desarrollo",
    });

    await bot.sendMessage(
      chatId,
      `üí∏ <b>Retiro</b>

‚ö†Ô∏è <b>Funci√≥n en desarrollo</b>

Pr√≥ximamente podr√°s retirar tus ganancias.

üí° <b>Mientras tanto:</b>
‚Ä¢ Los juegos son gratuitos en modo prueba
‚Ä¢ El sistema de pagos estar√° disponible pronto

¬°Mantente atento a las actualizaciones!`,
      { parse_mode: "HTML" }
    );
  } catch (err) {
    console.error("‚ùå Error en withdraw:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Error procesando solicitud",
    });
  }
}

/**
 * Maneja la solicitud de estad√≠sticas detalladas
 */
async function handleDetailedStats(bot, api, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;

  try {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Funci√≥n en desarrollo",
    });

    await bot.sendMessage(
      chatId,
      `üìä <b>Estad√≠sticas Detalladas</b>

‚ö†Ô∏è <b>Funci√≥n en desarrollo</b>

Pr√≥ximamente podr√°s ver:
‚Ä¢ Historial completo de partidas
‚Ä¢ Estad√≠sticas por juego
‚Ä¢ Gr√°ficos de rendimiento
‚Ä¢ Logros y badges

üí° <b>Por ahora:</b>
‚Ä¢ Las estad√≠sticas b√°sicas est√°n disponibles en tu perfil
‚Ä¢ Esta funci√≥n estar√° disponible pronto

¬°Mantente atento a las actualizaciones!`,
      { parse_mode: "HTML" }
    );
  } catch (err) {
    console.error("‚ùå Error en detailed stats:", err.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "Error procesando solicitud",
    });
  }
}

module.exports = {
  handleCreateNickname,
  handleChangeNickname,
  handleDeposit,
  handleDepositHistory,
  handleWithdraw,
  handleDetailedStats,
};
